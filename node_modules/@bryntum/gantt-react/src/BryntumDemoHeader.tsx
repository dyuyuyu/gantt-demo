/**
 * Header for Bryntum demos
 */

import React, { Component, createRef, Fragment, ReactNode, RefObject } from 'react';
import { BryntumFullscreenButton } from './BryntumFullscreenButton';
import { BryntumButton } from './BryntumButton';
import { BryntumThemeCombo } from './BryntumThemeCombo';
import { AjaxHelper, CSSHelper, DemoCodeEditor } from '@bryntum/gantt';

export type BryntumDemoHeaderProps = {
    /**
     * Insert children to demo header
     */
    children?: ReactNode | ReactNode[]
    /**
     * Demo title for header
     */
    title?: string
    /**
     * Display <BryntumThemeCombo/> component when set to `true`
     */
    themeCombo?: boolean
}

interface DemoCodeEditorState {
    hiddenEditor: boolean
}

export class BryntumDemoHeader extends Component<BryntumDemoHeaderProps, DemoCodeEditorState> {

    static defaultProps: BryntumDemoHeaderProps = {
        themeCombo : true
    };

    codeButtonRef: RefObject<BryntumButton> = createRef<BryntumButton>();

    downloadButtonRef: RefObject<BryntumButton> = createRef<BryntumButton>();

    isTest = document.location.search.includes('test');

    appFolder = '../';

    constructor(props: any) {
        super(props);
        this.state = {
            hiddenEditor : !Boolean(DemoCodeEditor.monacoCodePath)
        };
    }

    codeEditor?: DemoCodeEditor;

    getLink(): string {
        // Convert:
        // https://bryntum.com/products/schedulerpro/examples-scheduler/frameworks/react/javascript/basic/build/
        // https://bryntum.com/products/schedulerpro/examples/frameworks/react/javascript/basic/build/
        // To:
        // https://bryntum.com/products/schedulerpro/examples/#example-examples-scheduler-frameworks-react-basic
        // https://bryntum.com/products/schedulerpro/examples/#example-frameworks-react-basic

        const match = /(.*?\/)(examples.*?\/frameworks\/.*?)\/(build|out|dist)/.exec(document.location.href);
        return match ? `${match[1]}examples/#example-${match[2].replace(/\//gm, '-').replace('examples-frameworks', 'frameworks')}` : '#';
    }

    getTitle(): string {
        return this.props.title || document.title.split(' - ')[1] || document.title;
    }

    shouldComponentUpdate(nextProps: Readonly<BryntumDemoHeaderProps>): boolean {
        return nextProps.title !== this.props.title;
    }

    toggleCodeEditor = async() => {
        this.codeEditor = await DemoCodeEditor.toggleCodeEditor(
            this.codeEditor,
            this.codeButtonRef!.current!.instance,
            {
                appFolder        : this.appFolder,
                preferredSources : [
                    /App\.[jt]sx?/,
                    /\w+Config\.[jt]sx?/
                ]
            }
        );
    };

    async componentDidMount() {
        if (!this.state.hiddenEditor) {
            CSSHelper.insertRule('body { flex-direction : row !important }');
            CSSHelper.insertRule('#root, #container { flex: 1 !important; overflow : hidden !important }');
            CSSHelper.insertRule('#tools .b-widget { height: 2.5em !important }');
            CSSHelper.insertRule('.b-codeeditor-header { padding: 0.5em !important }');

            const appConfig = (await AjaxHelper.get(`${this.appFolder}app.config.json`, { parseJson : true })).parsedJson;
            if (appConfig.zip || this.isTest) {
                const downloadButton  = this.downloadButtonRef!.current!.instance;
                downloadButton.hidden = false;
                downloadButton.href   = `${this.appFolder}${appConfig.zip}`;
            }
        }
    }

    render(): ReactNode {
        return (
            <Fragment>
                <header className="demo-header">
                    <div id="title-container">
                        <a id="title" href={this.getLink()}>
                            <h1>{this.getTitle()}</h1>
                        </a>
                    </div>
                    <div id="tools">
                        {this.props.children}
                        {this.props.themeCombo && <BryntumThemeCombo/>}
                        <BryntumButton
                            text="Download Trial"
                            href="https://bryntum.com/download/?product=gantt"
                            cls="b-green b-raised"
                        />
                        <BryntumButton
                            ref={this.codeButtonRef}
                            hidden={this.state.hiddenEditor}
                            icon="b-icon-code"
                            onClick={this.toggleCodeEditor}
                            tooltip={'Click to show the code viewer'}
                            cls="b-raised b-blue b-code-button"
                        />
                        <BryntumButton
                            ref={this.downloadButtonRef}
                            hidden={true}
                            icon="b-icon-download"
                            href={'#'}
                            tooltip={'Download this demo zip archive'}
                            cls="b-raised b-blue"
                        />
                        <BryntumFullscreenButton/>
                    </div>
                </header>
            </Fragment>
        );
    }
}
