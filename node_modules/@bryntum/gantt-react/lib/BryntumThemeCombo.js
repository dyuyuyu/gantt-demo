import React, { createRef, Component } from 'react';
import { Combo, DomHelper, BrowserHelper } from '@bryntum/gantt';
export class BryntumThemeCombo extends Component {
    constructor() {
        super(...arguments);
        this.elRef = createRef();
    }
    componentDidMount() {
        const { container, store = {
            data: [
                { id: 'stockholm', text: 'Stockholm' },
                { id: 'classic', text: 'Classic' },
                { id: 'classic-light', text: 'Classic Light' },
                { id: 'classic-dark', text: 'Classic Dark' },
                { id: 'material', text: 'Material' }
            ]
        }, label = 'Theme', width = '16em', position = 'insertFirst' } = this.props;
        const element = this.elRef.current || container;
        this.combo = new Combo({
            [position]: element,
            store,
            label,
            width,
            value: 'stockholm',
            editable: false,
            cls: 'b-bright',
            listeners: {
                change({ value }) {
                    DomHelper.setTheme(value).then((context) => {
                        if (context) {
                            const { theme, prev } = context;
                            document.body.classList.remove(`b-theme-${prev}`);
                            document.body.classList.add(`b-theme-${theme}`);
                        }
                    });
                }
            }
        });
        const theme = BrowserHelper.searchParam('theme');
        if (theme) {
            this.combo.value = theme;
        }
    }
    componentWillUnmount() {
        if (this.combo) {
            this.combo.destroy();
        }
    }
    shouldComponentUpdate(nextProps) {
        const { combo } = this;
        if (combo) {
            nextProps.store && (combo.store = nextProps.store);
            nextProps.label && (combo.label = nextProps.label);
            nextProps.width && (combo.width = nextProps.width);
        }
        return true;
    }
    render() {
        return this.props.container ? null : React.createElement("div", { className: "b-theme-combo", ref: this.elRef });
    }
}
//# sourceMappingURL=BryntumThemeCombo.js.map