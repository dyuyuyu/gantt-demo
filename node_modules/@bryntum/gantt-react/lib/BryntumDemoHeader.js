import React, { Component, createRef, Fragment } from 'react';
import { BryntumFullscreenButton } from './BryntumFullscreenButton';
import { BryntumButton } from './BryntumButton';
import { BryntumThemeCombo } from './BryntumThemeCombo';
import { AjaxHelper, CSSHelper, DemoCodeEditor } from '@bryntum/gantt';
export class BryntumDemoHeader extends Component {
    constructor(props) {
        super(props);
        this.codeButtonRef = createRef();
        this.downloadButtonRef = createRef();
        this.isTest = document.location.search.includes('test');
        this.appFolder = '../';
        this.toggleCodeEditor = async () => {
            this.codeEditor = await DemoCodeEditor.toggleCodeEditor(this.codeEditor, this.codeButtonRef.current.instance, {
                appFolder: this.appFolder,
                preferredSources: [
                    /App\.[jt]sx?/,
                    /\w+Config\.[jt]sx?/
                ]
            });
        };
        this.state = {
            hiddenEditor: !Boolean(DemoCodeEditor.monacoCodePath)
        };
    }
    getLink() {
        const match = /(.*?\/)(examples.*?\/frameworks\/.*?)\/(build|out|dist)/.exec(document.location.href);
        return match ? `${match[1]}examples/#example-${match[2].replace(/\//gm, '-').replace('examples-frameworks', 'frameworks')}` : '#';
    }
    getTitle() {
        return this.props.title || document.title.split(' - ')[1] || document.title;
    }
    shouldComponentUpdate(nextProps) {
        return nextProps.title !== this.props.title;
    }
    async componentDidMount() {
        if (!this.state.hiddenEditor) {
            CSSHelper.insertRule('body { flex-direction : row !important }');
            CSSHelper.insertRule('#root, #container { flex: 1 !important; overflow : hidden !important }');
            CSSHelper.insertRule('#tools .b-widget { height: 2.5em !important }');
            CSSHelper.insertRule('.b-codeeditor-header { padding: 0.5em !important }');
            const appConfig = (await AjaxHelper.get(`${this.appFolder}app.config.json`, { parseJson: true })).parsedJson;
            if (appConfig.zip || this.isTest) {
                const downloadButton = this.downloadButtonRef.current.instance;
                downloadButton.hidden = false;
                downloadButton.href = `${this.appFolder}${appConfig.zip}`;
            }
        }
    }
    render() {
        return (React.createElement(Fragment, null,
            React.createElement("header", { className: "demo-header" },
                React.createElement("div", { id: "title-container" },
                    React.createElement("a", { id: "title", href: this.getLink() },
                        React.createElement("h1", null, this.getTitle()))),
                React.createElement("div", { id: "tools" },
                    this.props.children,
                    this.props.themeCombo && React.createElement(BryntumThemeCombo, null),
                    React.createElement(BryntumButton, { text: "Download Trial", href: "https://bryntum.com/download/?product=gantt", cls: "b-green b-raised" }),
                    React.createElement(BryntumButton, { ref: this.codeButtonRef, hidden: this.state.hiddenEditor, icon: "b-icon-code", onClick: this.toggleCodeEditor, tooltip: 'Click to show the code viewer', cls: "b-raised b-blue b-code-button" }),
                    React.createElement(BryntumButton, { ref: this.downloadButtonRef, hidden: true, icon: "b-icon-download", href: '#', tooltip: 'Download this demo zip archive', cls: "b-raised b-blue" }),
                    React.createElement(BryntumFullscreenButton, null)))));
    }
}
BryntumDemoHeader.defaultProps = {
    themeCombo: true
};
//# sourceMappingURL=BryntumDemoHeader.js.map